name: Build & Release for Windows & Linux

on:
  push:
    branches:
      - feature/final-changes

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Install xmlstarlet (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

      - name: Install xmlstarlet (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install xmlstarlet -y

      - name: Restore dependencies
        run: |
          dotnet restore ./SadieEmulator.sln

      - name: Find Sadie.Server .csproj file
        id: find_server_csproj
        run: |
          file=$(find . -name "Sadie.Server.csproj" | head -n 1)
          echo "server_csproj=$file" >> $GITHUB_OUTPUT

      - name: Get version from Sadie.Server .csproj
        id: get_version
        run: |
          version=$(xmlstarlet sel -t -v "/Project/PropertyGroup/Version" "${{ steps.find_server_csproj.outputs.server_csproj }}" || echo "1.0.0")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Find Sadie.Console .csproj file
        id: find_console_csproj
        run: |
          file=$(find . -name "Sadie.Console.csproj" | head -n 1)
          echo "console_csproj=$file" >> $GITHUB_OUTPUT

      - name: Build Sadie.Console project
        run: |
          dotnet build "${{ steps.find_console_csproj.outputs.console_csproj }}" -c Release

      - name: Publish for Linux (self-contained binary)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet publish "${{ steps.find_console_csproj.outputs.console_csproj }}" -c Release -r linux-x64 --self-contained true -o ./publish/linux

      - name: Publish for Windows (self-contained executable)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish "${{ steps.find_console_csproj.outputs.console_csproj }}" -c Release -r win-x64 --self-contained true -o ./publish/windows

      - name: Find Linux executable
        if: matrix.os == 'ubuntu-latest'
        id: find_linux
        run: |
          executable="./publish/linux/$(basename ${{ steps.find_console_csproj.outputs.console_csproj }} .csproj)"
          echo "linux_executable=$executable" >> $GITHUB_OUTPUT

      - name: Find Windows executable
        if: matrix.os == 'windows-latest'
        id: find_windows
        run: |
          executable="./publish/windows/$(basename ${{ steps.find_console_csproj.outputs.console_csproj }} .csproj).exe"
          echo "windows_executable=$executable" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and Upload Executables
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          generateReleaseNotes: true
          artifacts: |
            ${{ steps.find_linux.outputs.linux_executable }}
            ${{ steps.find_windows.outputs.windows_executable }}
